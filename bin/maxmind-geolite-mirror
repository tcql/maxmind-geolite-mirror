#!/usr/bin/env node
'use strict';

const cons   = require('../lib/console');
const config = require('../lib/config');
const mirror = require('../lib/mm-geolite-mirror');

let version = false;

if (process.argv[2] === '--version') {
    if (!process.argv[3]) throw new Error('--version tag requires a value');
    version = process.argv[3];
} else if (process.argv[2] === '--list-versions') {
    cons.log('Available GeoLite versions:')
    for (var key in config.geoIpDbs) {
        cons.log(' - ' + key);
    }
    process.exit(0);
}

if (require.main === module) {
    var dbs  = [];
    if (!version) {
        for (var key in config.geoIpDbs) {
            dbs = dbs.concat(config.geoIpDbs[key])
        }
    } else {
        if (version in config.geoIpDbs) {
            dbs = config.geoIpDbs[version]
        } else {
            throw new Error(version + ' is not a valid GeoLite version');
        }
    }

    // check each file, in series (poor mans async.eachSeries)
    mirror.doOne(dbs.shift(), function iterator (err) {
        if (err) {
            cons.error(err)
            if (dbs.length) cons.log('exiting prematurely.')
            process.exit(1)
        }
        if (!dbs.length) return;
        mirror.doOne(dbs.shift(), iterator);
    })
}
